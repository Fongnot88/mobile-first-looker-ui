import { RouterProvider } from "react-router-dom";
import { router } from "./routes";
import { AuthProvider } from "./components/AuthProvider";
import { CountdownProvider } from "./contexts/CountdownContext";
import { LanguageProvider } from "./contexts/LanguageContext";

import { ErrorBoundary } from "./components/ErrorBoundary";
import { Toaster } from "@/components/ui/toaster";
import { toast } from "@/components/ui/use-toast";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ThemeProvider } from "./components/theme/ThemeProvider";
import { useEffect, useState } from "react";
import { Capacitor } from "@capacitor/core";

import { NotificationPermissionPopup } from '@/components/NotificationPermissionPopup';
import { GlobalNotificationManager } from '@/components/GlobalNotificationManager';
import DebugPanel from '@/components/DebugPanel';
import { iOSLogger } from './utils/iOSDebugLogger';

// Log app initialization
iOSLogger.info('APP_INIT', 'Application initializing', {
  timestamp: new Date().toISOString(),
  userAgent: navigator.userAgent,
  capacitor: Capacitor.isNativePlatform(),
  platform: Capacitor.getPlatform()
});



// Create QueryClient outside component to prevent recreation on every render
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
});

const App: React.FC = () => {

  const [showNotificationPopup, setShowNotificationPopup] = useState(false);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const handleAcceptNotification = async () => {
    iOSLogger.info('NOTIFICATION_PERMISSION', 'User clicked Accept notification permission');
    setShowNotificationPopup(false);
    
    console.log('üîî User clicked Accept - attempting to request permission...');
    
    // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å denied)
    if (typeof Notification !== 'undefined' && Notification.requestPermission) {
      try {
        console.log('üîî Current permission before request:', Notification.permission);
        iOSLogger.debug('NOTIFICATION_PERMISSION', 'Requesting browser notification permission', {
          currentPermission: Notification.permission
        });
        
        const browserPermission = await Notification.requestPermission();
        console.log('üîî Browser permission result after request:', browserPermission);
        iOSLogger.info('NOTIFICATION_PERMISSION', 'Browser permission result', {
          result: browserPermission
        });
        
        if (browserPermission === 'granted') {
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          toast({
            title: "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            description: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å RiceFlow ‡πÅ‡∏•‡πâ‡∏ß",
            variant: "default",
          });
          
          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          setTimeout(() => {
            try {
              iOSLogger.debug('NOTIFICATION_TEST', 'Sending test notification');
              new Notification('üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà RiceFlow!', {
                body: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
                icon: '/favicon.ico'
              });
              iOSLogger.info('NOTIFICATION_TEST', 'Test notification sent successfully');
            } catch (error) {
              iOSLogger.error('NOTIFICATION_TEST', 'Failed to send test notification', { error: error.toString() }, error as Error);
            }
          }, 2000);
        } else if (browserPermission === 'denied') {
          iOSLogger.warn('NOTIFICATION_PERMISSION', 'User denied notification permission');
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò - ‡πÄ‡∏õ‡∏¥‡∏î browser settings ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
         
          
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î browser notification settings
          try {
            iOSLogger.debug('BROWSER_SETTINGS', 'Attempting to open browser notification settings');
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome/Edge
            if (navigator.userAgent.includes('Chrome') || navigator.userAgent.includes('Edge')) {
              window.open('chrome://settings/content/notifications', '_blank');
            }
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firefox
            else if (navigator.userAgent.includes('Firefox')) {
              window.open('about:preferences#privacy', '_blank');
            }
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Safari
            else if (navigator.userAgent.includes('Safari')) {
              // Safari ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î settings ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ
              alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Safari > Preferences > Websites > Notifications');
            }
            else {
              // ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
              window.open('chrome://settings/content/notifications', '_blank');
            }
            
            toast({
              title: "üöÄ ‡πÄ‡∏õ‡∏¥‡∏î Settings ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß!",
              description: "‡∏´‡∏≤ localhost:8080 ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'Allow' - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
              variant: "default",
            });
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            startPermissionMonitoring();
            
          } catch (error) {
            console.log('‚ùå Failed to open browser settings:', error);
            iOSLogger.error('BROWSER_SETTINGS', 'Failed to open browser settings', { error: error.toString() }, error as Error);
            toast({
              title: "üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö Manual",
              description: "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîî ‡∏Ç‡πâ‡∏≤‡∏á URL ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'Reset permission'",
              variant: "default",
            });
          }
        } else {
          iOSLogger.warn('NOTIFICATION_PERMISSION', 'Unexpected permission result', { result: browserPermission });
          // default ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          toast({
            title: "‚ÑπÔ∏è ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            variant: "default",
          });
        }
      } catch (error) {
        console.log('‚ùå Browser permission request failed:', error);
        iOSLogger.error('NOTIFICATION_PERMISSION', 'Browser permission request failed', { error: error.toString() }, error as Error);
        toast({
          title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå",
          variant: "destructive",
        });
      }
    } else {
      // ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô Notification API
      iOSLogger.warn('NOTIFICATION_PERMISSION', 'Browser does not support Notification API');
      toast({
        title: "‚ö†Ô∏è ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô",
        description: "‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const handleDeclineNotification = () => {
    setShowNotificationPopup(false);
    toast({
      title: "üí≠ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£",
      description: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      variant: "default",
    });
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡πÅ‡∏ö‡∏ö real-time
  const startPermissionMonitoring = () => {
    console.log('üîç Starting permission monitoring...');
    
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        let monitoringInterval: ReturnType<typeof setInterval>;
    
    const checkPermission = async () => {
      if (typeof Notification !== 'undefined') {
        const currentPermission = Notification.permission;
        console.log('üîç Current permission status:', currentPermission);
        
        if (currentPermission === 'granted') {
          console.log('‚úÖ Permission granted! FCM will handle notifications.');
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          toast({
            title: "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            description: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å RiceFlow ‡πÅ‡∏•‡πâ‡∏ß!",
            variant: "default",
          });
          
          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          setTimeout(() => {
            new Notification('üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà RiceFlow!', {
              body: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
              icon: '/favicon.ico'
            });
          }, 1000);
          
          // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
          if (monitoringInterval) {
            clearInterval(monitoringInterval);
          }
        }
      }
    };
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    monitoringInterval = setInterval(checkPermission, 2000);
    
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      if (monitoringInterval) {
        clearInterval(monitoringInterval);
      }
      console.log('üîç Permission monitoring stopped after 30 seconds');
    }, 30000);
    
    // Return cleanup function
    return () => {
      if (monitoringInterval) {
        clearInterval(monitoringInterval);
      }
    };
  };
  
  // Initialize notification permission popup - DISABLED to prevent annoying popup
  useEffect(() => {
    const checkNotificationPermission = () => {
      const permission = typeof Notification !== 'undefined' ? Notification.permission : 'default';
      console.log('üîê Browser notification permission:', permission);
      
      // Disabled popup to prevent annoying modal
      // if (permission === 'default' || permission === 'denied') {
      //   setTimeout(() => {
      //     setShowNotificationPopup(true);
      //   }, 3000);
      // }
    };

    const timer = setTimeout(checkNotificationPermission, 1000);
    return () => clearTimeout(timer);
  }, []);







  const handleGlobalCountdownComplete = () => {
    const currentTime = new Date().toISOString();
    console.log("üïê Global countdown complete at:", currentTime);
    console.log("üîÑ Triggering data refresh across all components");

    // Log query client state before invalidation
    const queryCache = queryClient.getQueryCache();
    const allQueries = queryCache.getAll();
    console.log("üìä Query cache state before refresh:", {
      totalQueries: allQueries.length,
      notificationQueries: allQueries.filter(
        (q) => q.queryKey[0] === "notifications"
      ).length,
      deviceQueries: allQueries.filter((q) => q.queryKey[0] === "devices")
        .length,
    });

    // Invalidate queries that should refresh on the global timer
    const invalidatedQueries = ["notifications", "devices", "measurements"];
    invalidatedQueries.forEach((queryKey) => {
      const result = queryClient.invalidateQueries({ queryKey: [queryKey] });
      console.log(`üîÑ Invalidated ${queryKey} queries:`, result);
    });

    console.log("‚úÖ Global countdown refresh completed");
  };

  return (
    <ErrorBoundary>
      <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
        <LanguageProvider>
          <CountdownProvider>
            <AuthProvider>
              <QueryClientProvider client={queryClient}>
                <GlobalNotificationManager />
                <RouterProvider router={router} />
                <Toaster />
                <DebugPanel />
                {/* Disabled notification popup to prevent annoying modal */}
                {false && showNotificationPopup && (
                  <NotificationPermissionPopup
                    isOpen={showNotificationPopup}
                    onAccept={handleAcceptNotification}
                    onDecline={handleDeclineNotification}
                  />
                )}

              </QueryClientProvider>
            </AuthProvider>
          </CountdownProvider>
        </LanguageProvider>
      </ThemeProvider>
    </ErrorBoundary>
  );
};

export default App;
