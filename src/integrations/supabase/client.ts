
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tlnkyztazcsqybjigrpw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRsbmt5enRhemNzcXliamlncnB3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU1OTc5MjMsImV4cCI6MjA2MTE3MzkyM30.TlNp_JJvmIX8YuMHWRuyBUQ1ZOsz6oAutGCZ_2-RfLE";
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRsbmt5enRhemNzcXliamlncnB3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTU5NzkyMywiZXhwIjoyMDYxMTczOTIzfQ.Ri_OcWAoLF-tF5MAD1MgH5yOq0Gwc1zHbCbMIjyAt8g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client"

// Single unified client - no more multiple GoTrueClient instances
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'sb-riceflow-auth-token',
  },
});

// Helper for admin operations using service role key in headers
export const createAdminRequest = () => ({
  headers: {
    'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
    'apikey': SUPABASE_SERVICE_ROLE_KEY,
  }
});

// Legacy compatibility - use regular client with proper RLS policies
export const supabaseAdmin = supabase;

/**
 * Fetches the latest device code from rice quality analysis
 * @returns The most recent device code or null if none found
 */
export const fetchLatestDeviceCode = async (): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .from('rice_quality_analysis')
      .select('device_code, created_at')
      .not('device_code', 'is', null)
      .order('created_at', { ascending: false })
      .limit(1);
      
    if (error) {
      console.error("Error fetching latest device:", error);
      return null;
    }
    
    if (data && data.length > 0) {
      return data[0].device_code;
    }
    
    return null;
  } catch (error) {
    console.error("Unexpected error fetching latest device:", error);
    return null;
  }
};
