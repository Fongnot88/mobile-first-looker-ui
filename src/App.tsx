import { RouterProvider } from "react-router-dom";
import { router } from "./routes";
import { AuthProvider } from "./components/AuthProvider";
import { CountdownProvider } from "./contexts/CountdownContext";
import { LanguageProvider } from "./contexts/LanguageContext";
import { PWAProvider } from "./contexts/PWAContext";
import { PWAInstallBanner } from "./components/PWAInstallBanner";
import { PWADebugComponent } from "./components/PWADebugComponent";
import { CountdownDebugger } from "./components/CountdownDebugger";
import { FCMDebugComponent } from "./components/FCMDebugComponent";
import { ErrorBoundary } from "./components/ErrorBoundary";
import { Toaster } from "@/components/ui/toaster";
import { toast } from "@/components/ui/use-toast";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ThemeProvider } from "./components/theme/ThemeProvider";
import { useEffect, useState } from "react";
import { Capacitor } from "@capacitor/core";
import OneSignal from 'react-onesignal';
import { useFCM } from "./hooks/useFCM";
import { NotificationPermissionPopup } from '@/components/NotificationPermissionPopup';
import { shouldInitializeOneSignal, shouldInitializeFCM, getPrimaryNotificationSystem } from '@/config/notification-config';

// Firebase config is now handled by src/lib/firebase.ts

// Create QueryClient outside component to prevent recreation on every render
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
});

const App: React.FC = () => {

  const [showNotificationPopup, setShowNotificationPopup] = useState(false);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const handleAcceptNotification = async () => {
    setShowNotificationPopup(false);
    
    console.log('üîî User clicked Accept - attempting to request permission...');
    
    // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å denied)
    if (typeof Notification !== 'undefined' && Notification.requestPermission) {
      try {
        console.log('üîî Current permission before request:', Notification.permission);
        const browserPermission = await Notification.requestPermission();
        console.log('üîî Browser permission result after request:', browserPermission);
        
        if (browserPermission === 'granted') {
          try {
            await OneSignal.User.PushSubscription.optIn();
            console.log('‚úÖ Successfully subscribed to OneSignal!');
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            toast({
              title: "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
              description: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å RiceFlow ‡πÅ‡∏•‡πâ‡∏ß",
              variant: "default",
            });
            
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            setTimeout(() => {
              new Notification('üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà RiceFlow!', {
                body: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
                icon: '/favicon.ico'
              });
            }, 2000);
            
          } catch (optInError) {
            console.log('‚ùå Failed to subscribe to OneSignal:', optInError);
          }
        } else if (browserPermission === 'denied') {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò - ‡πÄ‡∏õ‡∏¥‡∏î browser settings ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
         
          
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î browser notification settings
          try {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome/Edge
            if (navigator.userAgent.includes('Chrome') || navigator.userAgent.includes('Edge')) {
              window.open('chrome://settings/content/notifications', '_blank');
            }
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firefox
            else if (navigator.userAgent.includes('Firefox')) {
              window.open('about:preferences#privacy', '_blank');
            }
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Safari
            else if (navigator.userAgent.includes('Safari')) {
              // Safari ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î settings ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ
              alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Safari > Preferences > Websites > Notifications');
            }
            else {
              // ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
              window.open('chrome://settings/content/notifications', '_blank');
            }
            
            toast({
              title: "üöÄ ‡πÄ‡∏õ‡∏¥‡∏î Settings ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß!",
              description: "‡∏´‡∏≤ localhost:8080 ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'Allow' - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
              variant: "default",
            });
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            startPermissionMonitoring();
            
          } catch (error) {
            console.log('‚ùå Failed to open browser settings:', error);
            toast({
              title: "üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö Manual",
              description: "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîî ‡∏Ç‡πâ‡∏≤‡∏á URL ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'Reset permission'",
              variant: "default",
            });
          }
        } else {
          // default ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          toast({
            title: "‚ÑπÔ∏è ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            variant: "default",
          });
        }
      } catch (error) {
        console.log('‚ùå Browser permission request failed:', error);
        toast({
          title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå",
          variant: "destructive",
        });
      }
    } else {
      // ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô Notification API
      toast({
        title: "‚ö†Ô∏è ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô",
        description: "‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const handleDeclineNotification = () => {
    setShowNotificationPopup(false);
    toast({
      title: "üí≠ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£",
      description: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      variant: "default",
    });
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡πÅ‡∏ö‡∏ö real-time
  const startPermissionMonitoring = () => {
    console.log('üîç Starting permission monitoring...');
    
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        let monitoringInterval: ReturnType<typeof setInterval>;
    
    const checkPermission = async () => {
      if (typeof Notification !== 'undefined') {
        const currentPermission = Notification.permission;
        console.log('üîç Current permission status:', currentPermission);
        
        if (currentPermission === 'granted') {
          console.log('‚úÖ Permission granted! Subscribing to OneSignal...');
          
          try {
            // Subscribe ‡∏Å‡∏±‡∏ö OneSignal
            await OneSignal.User.PushSubscription.optIn();
            console.log('‚úÖ Successfully subscribed to OneSignal!');
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            toast({
              title: "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
              description: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å RiceFlow ‡πÅ‡∏•‡πâ‡∏ß!",
              variant: "default",
            });
            
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            setTimeout(() => {
              new Notification('üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà RiceFlow!', {
                body: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
                icon: '/favicon.ico'
              });
            }, 1000);
            
            // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            if (monitoringInterval) {
              clearInterval(monitoringInterval);
            }
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô OneSignal API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (debug ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
            try {
              const playerId = OneSignal.User.onesignalId;
              if (playerId) {
                console.log('üì± Sending test notification to player_id:', playerId);
                // Note: ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô API call ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á
              }
            } catch (e) {
              console.error('Error sending test notification:', e);
            }
            
          } catch (error) {
            console.log('‚ùå Failed to subscribe to OneSignal:', error);
            // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            try {
              console.log('üîÑ Trying to subscribe again...');
              await new Promise(r => setTimeout(r, 1500));
              await OneSignal.User.PushSubscription.optIn();
              console.log('‚úÖ Successfully subscribed on second attempt!');
            } catch (retryError) {
              console.error('‚ùå Second subscription attempt failed:', retryError);
            }
          }
        }
      }
    };
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    monitoringInterval = setInterval(checkPermission, 2000);
    
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      if (monitoringInterval) {
        clearInterval(monitoringInterval);
      }
      console.log('üîç Permission monitoring stopped after 30 seconds');
    }, 30000);
    
    // Return cleanup function
    return () => {
      if (monitoringInterval) {
        clearInterval(monitoringInterval);
      }
    };
  };
  
  useEffect(() => {
    const initializeOneSignal = async () => {
      // Check if OneSignal should be initialized based on config
      if (!shouldInitializeOneSignal()) {
        console.log('üîî OneSignal initialization skipped by configuration');
        return;
      }

      // Only initialize OneSignal if App ID is provided
      const appId = import.meta.env.VITE_ONESIGNAL_APP_ID || 'c77413d4-0f7d-4fe0-b7eb-99b132e451e0';
      
      if (!appId) {
        console.warn('OneSignal: VITE_ONESIGNAL_APP_ID is not set in environment variables');
        return;
      }

      try {
        console.log('üîî Initializing OneSignal with App ID:', appId);
        
        await OneSignal.init({
          appId: appId,
          allowLocalhostAsSecureOrigin: true,
          autoRegister: false, // ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° registration ‡πÄ‡∏≠‡∏á
          autoResubscribe: true,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° Debug Mode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π log ‡πÉ‡∏ô console
          debug: true,
          serviceWorkerParam: {
            scope: '/'
          },
          serviceWorkerPath: 'OneSignalSDKWorker.js',
          welcomeNotification: {
            disable: true,
            title: '',
            message: '',
          },
          notifyButton: {
            enable: true,
            displayPredicate: () => true, // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Bell Icon ‡πÄ‡∏™‡∏°‡∏≠
            size: 'medium',
            position: 'bottom-right',
            prenotify: true,
            showCredit: false,
            text: {
              'tip.state.unsubscribed': 'Subscribe to notifications',
              'tip.state.subscribed': "You're subscribed to notifications",
              'tip.state.blocked': "You've blocked notifications",
              'message.prenotify': 'Click to subscribe to notifications',
              'message.action.subscribing': 'Subscribing...',
              'message.action.subscribed': "Thanks for subscribing!",
              'message.action.resubscribed': "You're subscribed to notifications",
              'message.action.unsubscribed': "You won't receive notifications again",
              'dialog.main.title': 'Manage Site Notifications',
              'dialog.main.button.subscribe': 'SUBSCRIBE',
              'dialog.main.button.unsubscribe': 'UNSUBSCRIBE',
              'dialog.blocked.title': 'Unblock Notifications',
              'dialog.blocked.message': "Follow these instructions to allow notifications:"
            }
          },
          persistNotification: true, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏î‡∏õ‡∏¥‡∏î
        });
        
        console.log('‚úÖ OneSignal initialized successfully');
        
        // üî• Manual Registration ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Service Worker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Service Worker ‡∏Å‡πà‡∏≠‡∏ô
          if ('serviceWorker' in navigator) {
            const registration = await navigator.serviceWorker.getRegistration();
            console.log('üîß Service Worker registration:', registration);
            
            if (registration) {
              console.log('‚úÖ Service Worker is registered');
            } else {
              console.log('‚ö†Ô∏è Service Worker not found, OneSignal will handle it');
            }
          }
          
          await OneSignal.User.PushSubscription.optIn();
          console.log('üîî Manual registration successful');
        } catch (regError) {
          console.log('‚ö†Ô∏è Manual registration failed, will try later:', regError);
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ external_id ‡∏´‡∏£‡∏∑‡∏≠ user_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ
        const userId = `user_${Date.now()}`; // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô unique ID ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö login
        await OneSignal.login(userId);
        console.log('üë§ Set OneSignal external_id:', userId);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° tag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        await OneSignal.User.addTags({
          user_type: 'tester',
          app_version: '1.0.0',
          environment: 'localhost'
        });
        console.log('üè∑Ô∏è Added user tags for targeting');
        
        // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Push Notifications
        OneSignal.Notifications.addEventListener('click', (event) => {
          console.log('üîî Notification clicked:', event);
          // Handle notification click
        });
        
        OneSignal.Notifications.addEventListener('foregroundWillDisplay', (event) => {
          console.log('üîî Foreground notification will display:', event);
          // Notification received while app is in foreground
          event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á notification ‡∏ã‡πâ‡∏≥
          
          // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÅ‡∏ó‡∏ô
          const notification = event.notification;
          toast({
            title: notification.title || "üì± ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà",
            description: notification.body || "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å RiceFlow",
            variant: "default",
          });
        });
        
        OneSignal.Notifications.addEventListener('permissionChange', (granted) => {
          console.log('üîî Permission changed:', granted);
          if (granted) {
            toast({
              title: "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
              description: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å RiceFlow ‡πÅ‡∏•‡πâ‡∏ß",
              variant: "default",
            });
          }
        });
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ OneSignal ‡∏™‡∏£‡πâ‡∏≤‡∏á onesignalId ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å UI)
        const waitForOnesignalId = async () => {
          let attempts = 0;
          const maxAttempts = 5; // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          
          while (attempts < maxAttempts) {
            try {
              const onesignalId = OneSignal.User.onesignalId;
              if (onesignalId) {
                console.log('üÜî OneSignal ID obtained:', onesignalId);
                return onesignalId;
              }
              console.log(`üîÑ Waiting for onesignalId... attempt ${attempts + 1}/${maxAttempts}`);
              await new Promise(resolve => setTimeout(resolve, 500)); // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏õ‡πá‡∏ô 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
              attempts++;
            } catch (error) {
              console.log('‚ö†Ô∏è Error getting onesignalId:', error);
              attempts++;
              await new Promise(resolve => setTimeout(resolve, 500));
            }
          }
          
          console.log('‚ö†Ô∏è OneSignal ID not ready yet, but continuing...');
          return null;
        };
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏≠ (non-blocking)
        waitForOnesignalId().then(onesignalId => {
          if (onesignalId) {
            console.log('‚úÖ OneSignal ready with ID:', onesignalId);
          }
        }).catch(error => {
          console.log('‚ùå Error waiting for OneSignal ID:', error);
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        const isSubscribed = await OneSignal.User.PushSubscription.optedIn;
        console.log('üì± OneSignal subscription status:', isSubscribed);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
        const permission = typeof Notification !== 'undefined' ? Notification.permission : 'default';
        console.log('üîê Browser notification permission:', permission);
        
        if (permission === 'default') {
          // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          console.log('üîî Requesting notification permission...');
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
          setTimeout(() => {
            setShowNotificationPopup(true);
          }, 3000); // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        } else if (permission === 'denied') {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡∏°‡πà
          console.log('üö´ Notifications are blocked, but showing popup anyway.');
          
          // ‡πÅ‡∏™‡∏î‡∏á popup ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡∏°‡πà
          setTimeout(() => {
            setShowNotificationPopup(true);
          }, 3000);
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
          toast({
            title: "üí° ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
            description: "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå",
            variant: "default",
          });
        } else if (permission === 'granted') {
          // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß
          if (!isSubscribed) {
            console.log('üîî Permission granted but not subscribed, subscribing...');
            try {
              await OneSignal.User.PushSubscription.optIn();
            } catch (error) {
              console.log('‚ùå Failed to subscribe:', error);
            }
          } else {
            const userId = OneSignal.User.onesignalId;
            console.log('üë§ OneSignal User ID:', userId);
          }
        }
        
        // OneSignal initialized successfully (no toast notification)
        
      } catch (error) {
        console.error('‚ùå OneSignal initialization failed:', error);
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ",
          variant: "destructive",
        });
      }
    };

    // Initialize OneSignal after a short delay to ensure DOM is ready
    const timer = setTimeout(initializeOneSignal, 1000);
    
    return () => clearTimeout(timer);
  }, []);

  // Initialize FCM notifications only if configured
  const {
    isInitialized: fcmInitialized,
    token: fcmToken,
    error: fcmError,
  } = useFCM({
    enabled: shouldInitializeFCM(), // Add config check
    autoSendToServer: shouldInitializeFCM(),
    // userId: 'current-user-id', // Replace with actual user ID from auth context
    onTokenReceived: (token) => {
      if (shouldInitializeFCM()) {
        console.log("üîî FCM Token received:", token);
      }
    },
    onNotificationReceived: (notification) => {
      if (shouldInitializeFCM()) {
        console.log("üîî FCM Notification received:", notification);
        // Only show toast if OneSignal is not handling notifications
        if (getPrimaryNotificationSystem() === 'fcm') {
          toast({
            title: notification.title || "New Notification",
            description: notification.body || "You have a new notification",
          });
        }
      }
    },
    onNotificationOpened: (notification) => {
      if (shouldInitializeFCM()) {
        console.log("üîî FCM Notification opened:", notification);
        // Handle navigation or actions when notification is tapped
        if (notification.data?.route) {
          // Navigate to specific route if provided in notification data
          window.location.href = notification.data.route;
        }
      }
    },
    onError: (error) => {
      if (shouldInitializeFCM()) {
        console.error("üîî FCM Error:", error);
        toast({
          title: "FCM Notification Error",
          description: "Failed to setup FCM push notifications",
          variant: "destructive",
        });
      }
    },
  });

  // Register service worker for FCM
  useEffect(() => {
    const registerServiceWorker = async () => {
      // Register Service Worker only in production builds to avoid HMR reload loops in dev
      if (import.meta.env.PROD && !Capacitor.isNativePlatform() && "serviceWorker" in navigator) {
        try {
          console.log("üîî Registering Firebase messaging service worker...");
          // Register Firebase messaging service worker
          const registration = await navigator.serviceWorker.register(
            "/firebase-messaging-sw.js",
            {
              scope: "/",
            }
          );
          console.log(
            "üîî Firebase messaging service worker registered successfully:",
            registration.scope
          );

          // Wait for the service worker to be ready
          await navigator.serviceWorker.ready;
          console.log("üîî Service worker is ready");
        } catch (error) {
          console.error("üîî Service worker registration failed:", error);
          toast({
            title: "Service Worker Error",
            description: "Failed to register push notification service",
            variant: "destructive",
          });
        }
      } else {
        console.log(
          "üîî Service worker registration skipped (native platform or not supported)"
        );
      }
    };

    registerServiceWorker();
  }, []);

  // Log FCM status
  useEffect(() => {
    if (fcmInitialized) {
      console.log("üîî FCM initialized successfully");
      if (fcmToken) {
        console.log(
          "üîî FCM Token available:",
          fcmToken.substring(0, 20) + "..."
        );
      }
    }
    if (fcmError) {
      console.error("üîî FCM Error:", fcmError);
    }
  }, [fcmInitialized, fcmToken, fcmError]);

  const handleGlobalCountdownComplete = () => {
    const currentTime = new Date().toISOString();
    console.log("üïê Global countdown complete at:", currentTime);
    console.log("üîÑ Triggering data refresh across all components");

    // Log query client state before invalidation
    const queryCache = queryClient.getQueryCache();
    const allQueries = queryCache.getAll();
    console.log("üìä Query cache state before refresh:", {
      totalQueries: allQueries.length,
      notificationQueries: allQueries.filter(
        (q) => q.queryKey[0] === "notifications"
      ).length,
      deviceQueries: allQueries.filter((q) => q.queryKey[0] === "devices")
        .length,
    });

    // Invalidate queries that should refresh on the global timer
    const invalidatedQueries = ["notifications", "devices", "measurements"];
    invalidatedQueries.forEach((queryKey) => {
      const result = queryClient.invalidateQueries({ queryKey: [queryKey] });
      console.log(`üîÑ Invalidated ${queryKey} queries:`, result);
    });

    console.log("‚úÖ Global countdown refresh completed");
  };

  return (
    <ErrorBoundary>
      <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
        <LanguageProvider>
          <CountdownProvider>
            <PWAProvider>
              <AuthProvider>
                <QueryClientProvider client={queryClient}>
                  <RouterProvider router={router} />
                  <Toaster />
                  <PWAInstallBanner />
                  {showNotificationPopup && (
                    <NotificationPermissionPopup
                      isOpen={showNotificationPopup}
                      onAccept={handleAcceptNotification}
                      onDecline={handleDeclineNotification}
                    />
                  )}
                  {import.meta.env.VITE_DEBUG_MODE === "true" && (
                    <>
                      <PWADebugComponent />
                      <CountdownDebugger />
                      <FCMDebugComponent />
                    </>
                  )}
                </QueryClientProvider>
              </AuthProvider>
            </PWAProvider>
          </CountdownProvider>
        </LanguageProvider>
      </ThemeProvider>
    </ErrorBoundary>
  );
};

export default App;
