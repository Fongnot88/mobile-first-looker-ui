
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tlnkyztazcsqybjigrpw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRsbmt5enRhemNzcXliamlncnB3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU1OTc5MjMsImV4cCI6MjA2MTE3MzkyM30.TlNp_JJvmIX8YuMHWRuyBUQ1ZOsz6oAutGCZ_2-RfLE";
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRsbmt5enRhemNzcXliamlncnB3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTU5NzkyMywiZXhwIjoyMDYxMTczOTIzfQ.Ri_OcWAoLF-tF5MAD1MgH5yOq0Gwc1zHbCbMIjyAt8g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client"
// For admin operations, use:
// import { supabaseAdmin } from "@/integrations/supabase/client"

// Normal client for standard operations with realtime completely disabled
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true, // Persist session in storage
    autoRefreshToken: true, // Automatically refresh tokens
    detectSessionInUrl: true, // Detect session from URL (for OAuth)
  },
  realtime: {
    params: {
      eventsPerSecond: -1 // Disable realtime completely
    }
  }
});

// Comprehensive realtime disable by overriding the channel method completely
const originalChannel = supabase.channel;
supabase.channel = function(name: string) {
  console.log('ðŸš« Supabase channel creation blocked:', name);
  
  // Return a comprehensive mock channel
  const mockChannel = {
    on: () => mockChannel,
    subscribe: (callback?: (status: string) => void) => {
      console.log('ðŸš« Mock channel subscribe blocked:', name);
      // Don't call callback to avoid triggering any handlers
      return Promise.resolve({ error: null });
    },
    unsubscribe: () => {
      console.log('ðŸš« Mock channel unsubscribe:', name);
      return Promise.resolve({ error: null });
    },
    send: () => Promise.resolve({ error: null }),
    track: () => Promise.resolve({ error: null }),
    untrack: () => Promise.resolve({ error: null }),
    presence: { state: {} },
    state: 'closed'
  };

  return mockChannel as any;
};

// Log Supabase client creation
setTimeout(() => {
  if (typeof window !== 'undefined' && (window as any).iOSLogger) {
    (window as any).iOSLogger.info('SUPABASE_CLIENT', 'Main Supabase client created', {
      url: SUPABASE_URL,
      realtimeDisabled: true
    });
  }
}, 100);

// Admin client with full access for admin operations with realtime disabled
export const supabaseAdmin = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    persistSession: false, // Admin client should not persist sessions
    autoRefreshToken: false,
  },
  realtime: {
    params: {
      eventsPerSecond: -1 // Disable realtime completely
    }
  }
});

// Also override admin client channel method
supabaseAdmin.channel = function(name: string) {
  console.log('ðŸš« Supabase Admin channel creation blocked:', name);
  
  const mockChannel = {
    on: () => mockChannel,
    subscribe: () => Promise.resolve({ error: null }),
    unsubscribe: () => Promise.resolve({ error: null }),
    send: () => Promise.resolve({ error: null }),
    track: () => Promise.resolve({ error: null }),
    untrack: () => Promise.resolve({ error: null }),
    presence: { state: {} },
    state: 'closed'
  };

  return mockChannel as any;
};

/**
 * Fetches the latest device code from rice quality analysis
 * @returns The most recent device code or null if none found
 */
export const fetchLatestDeviceCode = async (): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .from('rice_quality_analysis')
      .select('device_code, created_at')
      .not('device_code', 'is', null)
      .order('created_at', { ascending: false })
      .limit(1);
      
    if (error) {
      console.error("Error fetching latest device:", error);
      return null;
    }
    
    if (data && data.length > 0) {
      return data[0].device_code;
    }
    
    return null;
  } catch (error) {
    console.error("Unexpected error fetching latest device:", error);
    return null;
  }
};
